SET search_path TO public;
CREATE SCHEMA s1;
CREATE TABLE t1 (id int PRIMARY KEY, val int) DISTRIBUTED BY (id);
CREATE TABLE t2 (id int PRIMARY KEY, val int) DISTRIBUTED BY (id);
CREATE TABLE t3 (id int PRIMARY KEY, val int);
INSERT INTO t1 SELECT i, i % 100 FROM (SELECT generate_series(1, 10000) i) t;
INSERT INTO t2 SELECT i, i % 10 FROM (SELECT generate_series(1, 1000) i) t;
INSERT INTO t3 SELECT i, i % 10 FROM (SELECT generate_series(1, 10) i) t;
ANALYZE t1;
ANALYZE t2;
ANALYZE t3;
LOAD 'pg_hint_plan';
SET pg_hint_plan.enable_hint TO on;
SET pg_hint_plan.debug_print TO on;
SET client_min_messages TO LOG;
SET search_path TO public, s1;
----
---- No. M-1 comment pattern
----
-- No. M-1-1
EXPLAIN (COSTS false) SELECT * FROM t1, t2;
                       QUERY PLAN                        
---------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Nested Loop
         ->  Broadcast Motion 2:2  (slice2; segments: 2)
               ->  Seq Scan on t2
         ->  Materialize
               ->  Seq Scan on t1
 Optimizer: Postgres query optimizer
(7 rows)

-- No. M-1-2
/*+ DisableBroadcast(t2) */
EXPLAIN (COSTS false) SELECT * FROM t1, t2;
LOG:  pg_hint_plan:
used hint:
DisableBroadcast(t2)
not used hint:
duplication hint:
error hint:
                       QUERY PLAN                        
---------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Nested Loop
         ->  Broadcast Motion 2:2  (slice2; segments: 2)
               ->  Seq Scan on t1
         ->  Materialize
               ->  Seq Scan on t2
 Optimizer: Postgres query optimizer
(7 rows)

-- No. M-1-3
/*+ DisableBroadcast(t1) DisableBroadcast(t2) */
EXPLAIN (COSTS false) SELECT * FROM t1, t2;
LOG:  pg_hint_plan:
used hint:
DisableBroadcast(t1)
DisableBroadcast(t2)
not used hint:
duplication hint:
error hint:
                      QUERY PLAN                      
------------------------------------------------------
 Nested Loop
   ->  Gather Motion 2:1  (slice1; segments: 2)
         ->  Seq Scan on t2
   ->  Materialize
         ->  Gather Motion 2:1  (slice2; segments: 2)
               ->  Seq Scan on t1
 Optimizer: Postgres query optimizer
(7 rows)

-- No. M-2-1
EXPLAIN (COSTS false) SELECT * FROM t1, t2 where t1.id=t2.id;
                 QUERY PLAN                 
--------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Merge Join
         Merge Cond: (t1.id = t2.id)
         ->  Index Scan using t1_pkey on t1
         ->  Sort
               Sort Key: t2.id
               ->  Seq Scan on t2
 Optimizer: Postgres query optimizer
(8 rows)

-- No. M-3-1
EXPLAIN (COSTS false) SELECT * FROM t1, t2 where t1.id=t2.val;
                            QUERY PLAN                            
------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Merge Join
         Merge Cond: (t1.id = t2.val)
         ->  Index Scan using t1_pkey on t1
         ->  Sort
               Sort Key: t2.val
               ->  Redistribute Motion 2:2  (slice2; segments: 2)
                     Hash Key: t2.val
                     ->  Seq Scan on t2
 Optimizer: Postgres query optimizer
(10 rows)

-- No. M-3-2
/*+ DisableRedistribute(t2) */
EXPLAIN (COSTS false) SELECT * FROM t1, t2 where t1.id=t2.val;
LOG:  pg_hint_plan:
used hint:
DisableRedistribute(t2)
not used hint:
duplication hint:
error hint:
                          QUERY PLAN                           
---------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Merge Join
         Merge Cond: (t1.id = t2.val)
         ->  Index Scan using t1_pkey on t1
         ->  Sort
               Sort Key: t2.val
               ->  Broadcast Motion 2:2  (slice2; segments: 2)
                     ->  Seq Scan on t2
 Optimizer: Postgres query optimizer
(9 rows)

-- No. M-4-1
EXPLAIN (COSTS false) SELECT * FROM t3, t2 where t2.val=t3.id;
                          QUERY PLAN                           
---------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t2.val = t3.id)
         ->  Seq Scan on t2
         ->  Hash
               ->  Broadcast Motion 2:2  (slice2; segments: 2)
                     ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(8 rows)

-- No. M-4-2
/*+  DisableBroadcast(t3) */
EXPLAIN (COSTS false) SELECT * FROM t3, t2 where t2.val=t3.id;
LOG:  pg_hint_plan:
used hint:
DisableBroadcast(t3)
not used hint:
duplication hint:
error hint:
                         QUERY PLAN                         
------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t2.val = t3.id)
         ->  Redistribute Motion 2:2  (slice2; segments: 2)
               Hash Key: t2.val
               ->  Seq Scan on t2
         ->  Hash
               ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(9 rows)

-- No. M-4-3
/*+  DisableBroadcast(t3) DisableRedistribute(t2) */
EXPLAIN (COSTS false) SELECT * FROM t3, t2 where t2.val=t3.id;
LOG:  pg_hint_plan:
used hint:
DisableRedistribute(t2)
DisableBroadcast(t3)
not used hint:
duplication hint:
error hint:
                       QUERY PLAN                        
---------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t2.val = t3.id)
         ->  Broadcast Motion 2:2  (slice2; segments: 2)
               ->  Seq Scan on t2
         ->  Hash
               ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(8 rows)

-- No. M-4-4
/*+  DisableBroadcast(t2) DisableRedistribute(t2) */
EXPLAIN (COSTS false) SELECT * FROM t3, t2 where t2.val=t3.id;
INFO:  pg_hint_plan: hint syntax error at or near "DisableBroadcast(t2) DisableRedistribute(t2) "
DETAIL:  Conflict motion hint.
LOG:  pg_hint_plan:
used hint:
not used hint:
DisableRedistribute(t2)
duplication hint:
DisableBroadcast(t2)
error hint:
                          QUERY PLAN                           
---------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t2.val = t3.id)
         ->  Seq Scan on t2
         ->  Hash
               ->  Broadcast Motion 2:2  (slice2; segments: 2)
                     ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(8 rows)

-- No. M-5-1
EXPLAIN (COSTS false) SELECT * FROM (t1 JOIN t2 ON t1.id=t2.val) JOIN t3 ON t2.val=t3.id;
                          QUERY PLAN                           
---------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t2.val = t1.id)
         ->  Seq Scan on t2
         ->  Hash
               ->  Broadcast Motion 2:2  (slice2; segments: 2)
                     ->  Merge Join
                           Merge Cond: (t1.id = t3.id)
                           ->  Index Scan using t1_pkey on t1
                           ->  Sort
                                 Sort Key: t3.id
                                 ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(13 rows)

-- No. M-5-2
/*+ DisableBroadcast(t1)  */
EXPLAIN (COSTS false) SELECT * FROM (t1 JOIN t2 ON t1.id=t2.val) JOIN t3 ON t2.val=t3.id;
LOG:  pg_hint_plan:
used hint:
not used hint:
DisableBroadcast(t1)
duplication hint:
error hint:
                          QUERY PLAN                           
---------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t2.val = t1.id)
         ->  Seq Scan on t2
         ->  Hash
               ->  Broadcast Motion 2:2  (slice2; segments: 2)
                     ->  Merge Join
                           Merge Cond: (t1.id = t3.id)
                           ->  Index Scan using t1_pkey on t1
                           ->  Sort
                                 Sort Key: t3.id
                                 ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(13 rows)

-- No. M-6-1
EXPLAIN (COSTS false) SELECT * FROM (t1 JOIN t2 ON t1.val=t2.val) JOIN t3 ON t2.val=t3.id;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t2.val = t1.val)
         ->  Broadcast Motion 2:2  (slice2; segments: 2)
               ->  Seq Scan on t2
         ->  Hash
               ->  Hash Join
                     Hash Cond: (t1.val = t3.id)
                     ->  Seq Scan on t1
                     ->  Hash
                           ->  Broadcast Motion 2:2  (slice3; segments: 2)
                                 ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(13 rows)

-- No. M-6-2
/*+ DisableBroadcast(t2)  */
EXPLAIN (COSTS false) SELECT * FROM (t1 JOIN t2 ON t1.val=t2.val) JOIN t3 ON t2.val=t3.id;
LOG:  pg_hint_plan:
used hint:
DisableBroadcast(t2)
not used hint:
duplication hint:
error hint:
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t1.val = t2.val)
         ->  Redistribute Motion 2:2  (slice2; segments: 2)
               Hash Key: t1.val
               ->  Hash Join
                     Hash Cond: (t1.val = t3.id)
                     ->  Seq Scan on t1
                     ->  Hash
                           ->  Broadcast Motion 2:2  (slice3; segments: 2)
                                 ->  Seq Scan on t3
         ->  Hash
               ->  Redistribute Motion 2:2  (slice4; segments: 2)
                     Hash Key: t2.val
                     ->  Seq Scan on t2
 Optimizer: Postgres query optimizer
(16 rows)

-- No. M-6-3
/*+ DisableBroadcast(t2) DisableRedistribute(t3) */
EXPLAIN (COSTS false) SELECT * FROM (t1 JOIN t2 ON t1.val=t2.val) JOIN t3 ON t2.val=t3.id;
LOG:  pg_hint_plan:
used hint:
DisableBroadcast(t2)
DisableRedistribute(t3)
not used hint:
duplication hint:
error hint:
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t1.val = t2.val)
         ->  Redistribute Motion 2:2  (slice2; segments: 2)
               Hash Key: t1.val
               ->  Hash Join
                     Hash Cond: (t1.val = t3.id)
                     ->  Seq Scan on t1
                     ->  Hash
                           ->  Broadcast Motion 2:2  (slice3; segments: 2)
                                 ->  Seq Scan on t3
         ->  Hash
               ->  Redistribute Motion 2:2  (slice4; segments: 2)
                     Hash Key: t2.val
                     ->  Seq Scan on t2
 Optimizer: Postgres query optimizer
(16 rows)

-- No. M-6-4
/*+ DisableBroadcast(t2) DisableBroadcast(t3) */
EXPLAIN (COSTS false) SELECT * FROM (t1 JOIN t2 ON t1.val=t2.val) JOIN t3 ON t2.val=t3.id;
LOG:  pg_hint_plan:
used hint:
DisableBroadcast(t2)
DisableBroadcast(t3)
not used hint:
duplication hint:
error hint:
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t1.val = t2.val)
         ->  Seq Scan on t1
         ->  Hash
               ->  Broadcast Motion 2:2  (slice2; segments: 2)
                     ->  Hash Join
                           Hash Cond: (t2.val = t3.id)
                           ->  Redistribute Motion 2:2  (slice3; segments: 2)
                                 Hash Key: t2.val
                                 ->  Seq Scan on t2
                           ->  Hash
                                 ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(14 rows)

-- No. M-6-5
/*+ DisableBroadcast(t2) DisableBroadcast(t3) DisableBroadcast(t4) */
EXPLAIN (COSTS false) SELECT * FROM (t1 JOIN t2 ON t1.val=t2.val) JOIN t3 ON t2.val=t3.id;
LOG:  pg_hint_plan:
used hint:
DisableBroadcast(t2)
DisableBroadcast(t3)
not used hint:
DisableBroadcast(t4)
duplication hint:
error hint:
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Hash Join
         Hash Cond: (t1.val = t2.val)
         ->  Seq Scan on t1
         ->  Hash
               ->  Broadcast Motion 2:2  (slice2; segments: 2)
                     ->  Hash Join
                           Hash Cond: (t2.val = t3.id)
                           ->  Redistribute Motion 2:2  (slice3; segments: 2)
                                 Hash Key: t2.val
                                 ->  Seq Scan on t2
                           ->  Hash
                                 ->  Seq Scan on t3
 Optimizer: Postgres query optimizer
(14 rows)

